import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class Canvas extends JFrame {
    private static Canvas instance;
    private static final int WINDOW_SIZE = 500;

    public static Canvas getInstance() {
        if (instance == null) {
            instance = new Canvas("SilkRoad Game", WINDOW_SIZE, WINDOW_SIZE, Color.YELLOW);
        }
        instance.setVisible(true);
        return instance;
    }

    private final JFrame frame;
    private final CanvasPanel panel;
    private Graphics2D graphics;
    private final Color background;
    private Image buffer;
    private final List<Object> shapes;
    private static JProgressBar progressBar;
    private final HashMap<Object, ShapeData> shapeData;

    private Canvas(String title, int width, int height, Color bg) {
        frame = new JFrame();
        panel = new CanvasPanel();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setTitle(title);
        panel.setPreferredSize(new Dimension(width, height));
        background = bg;
        shapes = new ArrayList<>();
        shapeData = new HashMap<>();

        JPanel container = new JPanel(new BorderLayout());
        container.add(panel, BorderLayout.CENTER);
        progressBar = new JProgressBar(0, 100);
        progressBar.setStringPainted(true);
        container.add(progressBar, BorderLayout.SOUTH);

        frame.setContentPane(container);
        frame.pack();
    }

    public void setVisible(boolean visible) {
        if (graphics == null) {
            Dimension size = panel.getSize();
            buffer = panel.createImage(size.width, size.height);
            graphics = (Graphics2D) buffer.getGraphics();
            graphics.setColor(background);
            graphics.fillRect(0, 0, size.width, size.height);
            graphics.setColor(Color.BLACK);
        }
        frame.setVisible(visible);
    }

    public void render(Object obj, Color color, Shape shape) {
        shapes.remove(obj);
        shapes.add(obj);
        shapeData.put(obj, new ShapeData(shape, color));
        update();
    }

    public void clear(Object obj) {
        shapes.remove(obj);
        shapeData.remove(obj);
        update();
    }

    public void pause(int ms) {
        try {
            Thread.sleep(ms);
        } catch (InterruptedException ignored) {}
    }

    private void update() {
        clearCanvas();
        for (Object obj : shapes) {
            ShapeData data = shapeData.get(obj);
            if (data != null) {
                data.render(graphics);
            }
        }
        panel.repaint();
    }

    private void clearCanvas() {
        Color current = graphics.getColor();
        graphics.setColor(background);
        Dimension size = panel.getSize();
        graphics.fillRect(0, 0, size.width, size.height);
        graphics.setColor(current);
    }

    private class CanvasPanel extends JPanel {
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.drawImage(buffer, 0, 0, null);
        }
    }

    private static class ShapeData {
        private final Shape shape;
        private final Color color;

        ShapeData(Shape shape, Color color) {
            this.shape = shape;
            this.color = color;
        }

        void render(Graphics2D g) {
            g.setColor(color);
            g.fill(shape);
            g.draw(shape);
        }
    }

    public static void setProgress(int value) {
        progressBar.setValue(value);
    }
}

import java.awt.Color;
import java.awt.geom.Rectangle2D;

public class Rectangle {
    private int xPos, yPos, width, height;
    private final Color color;
    private boolean visible;

    public Rectangle(int y, int x, int h, int w, Color col) {
        this.yPos = y;
        this.xPos = x;
        this.height = h;
        this.width = w;
        this.color = col;
        this.visible = false;
    }

    public void show(boolean visible) {
        this.visible = visible;
        if (visible) {
            render();
        } else {
            clear();
        }
    }

    private void render() {
        if (!visible) return;
        Canvas canvas = Canvas.getInstance();
        canvas.render(this, color, new Rectangle2D.Double(xPos, yPos, width, height));
        canvas.pause(10);
    }

    private void clear() {
        if (!visible) return;
        Canvas canvas = Canvas.getInstance();
        canvas.clear(this);
    }
}

import java.awt.Color;
import java.awt.geom.Ellipse2D;

public class Circle {
    private final int diameter;
    private int xPos, yPos;
    private final Color color;
    private boolean visible;

    public Circle(int y, int x, int size, Color col) {
        this.yPos = y;
        this.xPos = x;
        this.diameter = size;
        this.color = col;
        this.visible = false;
    }

    public void show(boolean visible) {
        this.visible = visible;
        if (visible) {
            render();
        } else {
            clear();
        }
    }

    private void render() {
        if (!visible) return;
        Canvas canvas = Canvas.getInstance();
        canvas.render(this, color, new Ellipse2D.Double(xPos, yPos, diameter, diameter));
        canvas.pause(10);
    }

    private void clear() {
        if (!visible) return;
        Canvas canvas = Canvas.getInstance();
        canvas.clear(this);
    }

    public void moveTo(int newY, int newX) {
        clear();
        this.yPos = newY;
        this.xPos = newX;
        render();
    }
}

import java.awt.Color;
import java.awt.Polygon;

public class Triangle {
    private static final int VERTICES = 3;
    private int xBase, yBase, width, height;
    private final Color color;
    private boolean visible;

    public Triangle(int y, int x, int h, int w, Color col) {
        this.yBase = y;
        this.xBase = x;
        this.height = h;
        this.width = w;
        this.color = col;
        this.visible = false;
    }

    public void show(boolean visible) {
        this.visible = visible;
        if (visible) {
            render();
        } else {
            clear();
        }
    }

    private void render() {
        if (!visible) return;
        Canvas canvas = Canvas.getInstance();
        int[] xPoints = {xBase, xBase + (width / 2), xBase - (width / 2)};
        int[] yPoints = {yBase, yBase + height, yBase + height};
        canvas.render(this, color, new Polygon(xPoints, yPoints, VERTICES));
        canvas.pause(10);
    }

    private void clear() {
        if (!visible) return;
        Canvas canvas = Canvas.getInstance();
        canvas.clear(this);
    }
}

import java.awt.Color;

public class Store {
    private static final Color[] COLORS = {Color.RED, Color.BLUE, Color.GREEN, Color.MAGENTA, Color.CYAN};
    private static final int[][] POSITIONS = {
        {75, 0, 50, 12}, {175, 0, 150, 12}, {275, 0, 250, 12},
        {375, 0, 350, 12}, {475, 0, 450, 12}, {475, 125, 450, 137},
        {475, 225, 450, 237}, {475, 325, 450, 337}, {475, 475, 450, 487},
        {375, 475, 350, 487}, {275, 475, 250, 487}, {175, 475, 150, 487},
        {75, 475, 50, 487}, {25, 325, 0, 337}, {25, 225, 0, 237},
        {150, 200, 125, 212}, {250, 200, 225, 212}
    };
    private static final int SIZE = 25;

    private final int funds;
    private boolean inStock;
    private final int position;
    private final Rectangle facade;
    private final Triangle roof;

    public Store(int money, int pos) {
        this.funds = money;
        this.position = pos;
        this.inStock = true;
        Color color = COLORS[pos % COLORS.length];
        this.facade = new Rectangle(POSITIONS[pos][0], POSITIONS[pos][1], SIZE, SIZE, color);
        this.roof = new Triangle(POSITIONS[pos][2], POSITIONS[pos][3], SIZE, SIZE, color.darker());
        this.facade.show(true);
        this.roof.show(true);
    }

    public void restock() {
        this.inStock = true;
    }

    public void show(boolean visible) {
        facade.show(visible);
        roof.show(visible);
    }

    public void depleteStock() {
        this.inStock = false;
    }

    public int getFunds() {
        return funds;
    }

    public boolean isInStock() {
        return inStock;
    }

    public void remove() {
        facade.show(false);
        roof.show(false);
    }
}

import java.awt.Color;

public class Robot {
    private static final Color[] COLORS = {Color.RED, Color.BLUE, Color.GREEN, Color.MAGENTA, Color.CYAN};
    private static final int[][] POSITIONS = {
        {50, 50}, {150, 50}, {250, 50}, {350, 50}, {450, 50},
        {450, 150}, {450, 250}, {450, 350}, {450, 450},
        {350, 450}, {250, 450}, {150, 450}, {50, 450},
        {50, 350}, {50, 250}, {150, 250}, {250, 250}
    };
    private static final int SIZE = 25;

    private final int origin;
    private int position;
    private int collectedFunds;
    private final Circle body;

    public Robot(int pos) {
        this.position = pos;
        this.origin = pos;
        this.collectedFunds = 0;
        this.body = new Circle(POSITIONS[pos][0], POSITIONS[pos][1], SIZE, COLORS[pos % COLORS.length]);
        this.body.show(true);
    }

    public void moveTo(int steps, boolean reset) {
        if (reset) {
            this.position = origin;
            this.collectedFunds = 0;
        } else {
            this.position += steps;
        }
        this.body.moveTo(POSITIONS[position][0], POSITIONS[position][1]);
    }

    public int getFunds() {
        return collectedFunds;
    }

    public void show(boolean visible) {
        body.show(visible);
    }

    public void collectFunds(int amount) {
        this.collectedFunds += amount;
    }

    public void remove() {
        body.show(false);
    }
}

import java.awt.Color;

public class Road {
    private static final int SIZE = 100;
    private final Rectangle segment;

    public Road(int y, int x) {
        this.segment = new Rectangle(y, x, SIZE, SIZE, Color.GRAY);
        this.segment.show(true);
    }
}

import javax.swing.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class SilkRoad {
    public static final int MAX_LENGTH = 17;
    public static final int SEGMENT_SIZE = 100;
    public static final int[][] COORDINATES = {
        {0, 0}, {100, 0}, {200, 0}, {300, 0}, {400, 0},
        {400, 100}, {400, 200}, {400, 300}, {400, 400},
        {300, 400}, {200, 400}, {100, 400}, {0, 400},
        {0, 300}, {0, 200}, {100, 200}, {200, 200}
    };

    private static final String TITLE = "SilkRoad";
    private int profit;
    private int fundsTotal;
    private final int roadLength;
    private final Store[] stores;
    private final HashMap<Integer, List<Robot>> robots;
    private final int[] robotPresence;
    private boolean success;

    public SilkRoad(int length) {
        this.roadLength = length;
        this.stores = new Store[MAX_LENGTH];
        this.robots = new HashMap<>();
        this.robotPresence = new int[MAX_LENGTH];
        this.profit = 0;
        this.fundsTotal = 0;
        this.success = true;

        for (int i = 0; i < MAX_LENGTH; i++) {
            stores[i] = null;
            robots.put(i, new ArrayList<>());
            robotPresence[i] = 0;
        }

        for (int i = 0; i < length; i++) {
            new Road(COORDINATES[i][0], COORDINATES[i][1]);
        }
    }

    public static void main(String[] args) {
        int length = Integer.parseInt(JOptionPane.showInputDialog(null, "Enter road length [1, 17]", TITLE, JOptionPane.INFORMATION_MESSAGE));
        if (length <= 0 || length > MAX_LENGTH) {
            JOptionPane.showMessageDialog(null, "Invalid length", TITLE + " - Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        SilkRoad game = new SilkRoad(length);
        game.placeStore(0, 100);
        game.placeRobot(1);
        game.moveRobot(1, -1);
        game.profit();
        game.makeInvisible();
        game.makeVisible();
        game.ok();
    }

    public void placeStore(int pos, int funds) {
        if (pos < 0 || pos >= roadLength || funds <= 0) {
            JOptionPane.showMessageDialog(null, "Invalid store parameters", TITLE, JOptionPane.ERROR_MESSAGE);
            success = false;
            return;
        }
        if (stores[pos] != null) {
            JOptionPane.showMessageDialog(null, "Store exists at position " + (pos + 1), TITLE, JOptionPane.ERROR_MESSAGE);
            success = false;
            return;
        }
        if (!robots.get(pos).isEmpty()) {
            JOptionPane.showMessageDialog(null, "Robot at position " + (pos + 1), TITLE, JOptionPane.ERROR_MESSAGE);
            success = false;
            return;
        }
        fundsTotal += funds;
        stores[pos] = new Store(funds, pos);
        updateBar();
        success = true;
        System.out.println("Store placed at " + (pos + 1) + ", total funds: " + fundsTotal);
    }

    public void removeStore(int pos) {
        if (pos < 0 || pos >= roadLength) {
            JOptionPane.showMessageDialog(null, "Invalid position", TITLE, JOptionPane.ERROR_MESSAGE);
            success = false;
            return;
        }
        if (stores[pos] == null) {
            JOptionPane.showMessageDialog(null, "No store at position " + (pos + 1), TITLE, JOptionPane.ERROR_MESSAGE);
            success = false;
            return;
        }
        fundsTotal -= stores[pos].getFunds();
        stores[pos].remove();
        stores[pos] = null;
        updateBar();
        success = true;
        System.out.println("Store removed from " + (pos + 1) + ", total funds: " + fundsTotal);
    }

    public void placeRobot(int pos) {
        if (pos < 0 || pos >= roadLength) {
            JOptionPane.showMessageDialog(null, "Invalid position", TITLE, JOptionPane.ERROR_MESSAGE);
            success = false;
            return;
        }
        if (robotPresence[pos] == 1) {
            JOptionPane.showMessageDialog(null, "Robot already at position " + (pos + 1), TITLE, JOptionPane.ERROR_MESSAGE);
            success = false;
            return;
        }
        if (stores[pos] != null) {
            JOptionPane.showMessageDialog(null, "Store at position " + (pos + 1), TITLE, JOptionPane.ERROR_MESSAGE);
            success = false;
            return;
        }
        Robot robot = new Robot(pos);
        robotPresence[pos] = 1;
        robots.get(pos).add(robot);
        success = true;
    }

    public void removeRobot(int pos) {
        if (pos < 0 || pos >= roadLength) {
            JOptionPane.showMessageDialog(null, "Invalid position", TITLE, JOptionPane.ERROR_MESSAGE);
            success = false;
            return;
        }
        if (robots.get(pos).isEmpty()) {
            JOptionPane.showMessageDialog(null, "No robot at position " + (pos + 1), TITLE, JOptionPane.ERROR_MESSAGE);
            success = false;
            return;
        }
        Robot robot = robots.get(pos).remove(0);
        robot.remove();
        robotPresence[pos] = 0;
        success = true;
    }

    public void moveRobot(int pos, int steps) {
        if (pos < 0 || pos >= roadLength || pos + steps < 0 || pos + steps >= roadLength) {
            JOptionPane.showMessageDialog(null, "Invalid move parameters", TITLE, JOptionPane.ERROR_MESSAGE);
            success = false;
            return;
        }
        if (robots.get(pos).isEmpty()) {
            JOptionPane.showMessageDialog(null, "No robot at position " + (pos + 1), TITLE, JOptionPane.ERROR_MESSAGE);
            success = false;
            return;
        }
        Robot robot = robots.get(pos).remove(0);
        robot.moveTo(steps, false);
        int newPos = pos + steps;
        robots.get(newPos).add(robot);
        if (stores[newPos] != null && stores[newPos].isInStock()) {
            int funds = stores[newPos].getFunds();
            robot.collectFunds(funds);
            stores[newPos].depleteStock();
            profit += funds;
            updateBar();
        }
        success = true;
    }

    public void resupplyStores() {
        for (Store store : stores) {
            if (store != null) {
                store.restock();
                fundsTotal += store.getFunds();
            }
        }
        updateBar();
        success = true;
    }

    public void returnRobots() {
        for (int i = 0; i < MAX_LENGTH; i++) {
            for (Robot robot : robots.get(i)) {
                robot.moveTo(0, true);
            }
        }
        success = true;
    }

    public void reboot() {
        resupplyStores();
        returnRobots();
        profit = 0;
        fundsTotal = 0;
        updateBar();
        success = true;
    }

    public int profit() {
        JOptionPane.showMessageDialog(null, "Profit: " + profit, TITLE, JOptionPane.INFORMATION_MESSAGE);
        success = true;
        return profit;
    }

    public int[][] stores() {
        int[][] data = new int[MAX_LENGTH][2];
        for (int i = 0; i < MAX_LENGTH; i++) {
            if (stores[i] != null) {
                data[i] = new int[]{i, stores[i].getFunds()};
            }
        }
        success = true;
        return data;
    }

    public int[][] robots() {
        int[][] data = new int[MAX_LENGTH][2];
        int idx = 0;
        for (int i = 0; i < MAX_LENGTH; i++) {
            for (Robot robot : robots.get(i)) {
                data[idx++] = new int[]{i, robot.getFunds()};
            }
        }
        success = true;
        return data;
    }

    public void makeVisible() {
        for (int i = 0; i < MAX_LENGTH; i++) {
            for (Robot robot : robots.get(i)) {
                robot.show(true);
            }
            if (stores[i] != null) {
                stores[i].show(true);
            }
        }
        success = true;
    }

    public void makeInvisible() {
        for (int i = 0; i < MAX_LENGTH; i++) {
            for (Robot robot : robots.get(i)) {
                robot.show(false);
            }
            if (stores[i] != null) {
                stores[i].show(false);
            }
        }
        success = true;
    }

    public void finish() {
        success = true;
        System.exit(0);
    }

    public boolean ok() {
        JOptionPane.showMessageDialog(null, success ? "Success" : "Failed", TITLE, success ? JOptionPane.PLAIN_MESSAGE : JOptionPane.ERROR_MESSAGE);
        return success;
    }

    public void updateBar() {
        int percentage = fundsTotal == 0 ? 0 : (int) ((double) profit / fundsTotal * 100);
        Canvas.setProgress(percentage);
    }
}


